generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// One user can be Admin, Client and an Operator
model User {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(2000)
  email    String @db.VarChar(2000)
  password String @db.VarChar(2000)

  // ########## METADATA
  created_date DateTime
  deactivated  Boolean

  // #######  RELATIONSHIPS
  adminId    Int?      @unique // one-to-one relationship non-obligatory
  admin      Admin?    @relation(fields: [adminId], references: [id]) //foreign key
  clientId   Int?      @unique
  client     Client?   @relation(fields: [clientId], references: [id]) //foreign key
  operatorId Int?      @unique
  operator   Operator? @relation(fields: [operatorId], references: [id]) //foreign key
  Review     Review[] // one-to-many relationship: one user can post many reviews, but one review canÂ´t be posted by many users
}

model Admin {
  id Int @id @default(autoincrement())

  // ##### RELATIONSHIPS
  user User?
}

model Client {
  id    Int    @id @default(autoincrement())
  phone String @db.VarChar(2000)

  // ####### RELATIONSHIPS
  user          User?
  Payment       Payment[] //one-to-many relationship: one client can have made many payments **check!
  ShuttleTravel ShuttleTravel[]
  BillingData   BillingData[]

  Promotion Promotion[] //one-to-many relationships: one client can have many promotions check?
}

model Operator {
  id        Int     @id @default(autoincrement())
  available Boolean
  phone     String  @db.VarChar(2000)

  // ####### RELATIONSHIPS
  user          User?
  Shuttle       Shuttle?        @relation(fields: [shuttleId], references: [id])
  shuttleId     Int?
  ShuttleTravel ShuttleTravel[]
}

model Shuttle {
  id               Int     @id @default(autoincrement())
  shuttle_number   String  @db.VarChar(2000)
  available        Boolean
  registration_tag String  @db.VarChar(2000)
  seats            Int

  // ##### METADATA
  create_date DateTime

  // ########## RELATIONSHIPS
  operatorId    Int
  operator      Operator[] // one-to-many relationship: one shuttle can operated by more than one operator
  ShuttleTravel ShuttleTravel[] // one-to many relationship: one shuttle can have many shuttle travels

  //TODO: misiing relationship: services
}

model ShuttleTravel {
  id              Int      @id @default(autoincrement())
  start_date      DateTime
  end_date        DateTime
  distance_meters Int

  // ###### METADATA
  creation_date DateTime


  // ##### RELATIONSHIPS
  shuttleId  Int
  shuttle    Shuttle  @relation(fields: [shuttleId], references: [id])
  clientId   Int
  client     Client   @relation(fields: [clientId], references: [id])
  operatorId Int
  operator   Operator @relation(fields: [operatorId], references: [id])


  //TODO: missing relationship: location, region**

  Location Location[]
}

model PaymentMethod {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(2000)


  // ####### RELATIONSHIPS

  Payment       Payment[]
  BillingData   BillingData? @relation(fields: [billingDataId], references: [id])
  billingDataId Int?
}

model Payment {
  id           Int @id @default(autoincrement())
  total_amount Int
  tokenId      Int

  // #### METADATA
  create_date DateTime

  // ##### RELATIONSHIPS
  clientId        Int
  client          Client        @relation(fields: [clientId], references: [id])
  refundId        Int?
  refund          Refund?       @relation(fields: [refundId], references: [id])
  Service         Service? //one-to-one(optional) relationaship: non-obligatory, one service needs a payment but a payment can be done without a service
  paymentMethodId Int
  payment_method  PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  billingDataId   Int
  billing_data    BillingData   @relation(fields: [billingDataId], references: [id])

}

model BillingData {
  id            Int    @id @default(autoincrement())
  rfc           String @db.VarChar(2000)
  address       String @db.VarChar(2000)
  email_billing String @db.VarChar(2000)
  payment_card  String @db.VarChar(2000)
  card_number   Int


  // ###### RELAITONSHIPS
  clientId Int
  client   Client    @relation(fields: [clientId], references: [id])
  Payment  Payment[]

  PaymentMethod PaymentMethod[]
}

model Refund {
  id      Int @id @default(autoincrement())
  amount  Int
  tokenId Int

  // #### METADATA
  create_date DateTime

  // #### RELATIONSHIPS
  Payment Payment? // one-to-one(optional) relationship: one
}

//One shuttle can be operated by many operators

model Service {
  id    Int    @id @default(autoincrement())
  folio String @db.VarChar(2000) //this will serve as the ticket

  // ##### METADATA
  create_date DateTime


  // #### RELATIONSHIPS
  paymentId       Int?              @unique
  payment         Payment?          @relation(fields: [paymentId], references: [id])
  cancellationId  Int?
  cancellation    Cancellation?     @relation(fields: [cancellationId], references: [id])
  statusId        Int
  status          ServiceStatus     @relation(fields: [statusId], references: [id])
  ServiceMetadata ServiceMetadata[]
  Promotion       Promotion[]
}

model ServiceStatus {
  id     Int    @id @default(autoincrement())
  status String @db.VarChar(2000)

  // ###### RELATIONSHIPS
  Service Service[]
}

model ServiceMetadata {
  id                Int      @id @default(autoincrement())
  modification_data DateTime
  snapshot_data     Json

  // ##### RELATIONSHIPS
  serviceId Int
  service   Service @relation(fields: [serviceId], references: [id])
}

model Cancellation {
  id                 Int      @id @default(autoincrement())
  cancelation_pholio String   @db.VarChar(2000)
  create_date        DateTime
  delete_date        DateTime
  // one service can have one cancellation
  Service            Service? //one-to-one relationship: one service can only have one cancellation **check!
}

model Review {
  id          Int      @id @default(autoincrement())
  comment     String   @db.VarChar(2000) //One user can post many reviews of one service
  rating      Int // 1 to 5, meaning 5 the top grade
  userId      Int
  author      User     @relation(fields: [userId], references: [id]) // foreign-key
  create_date DateTime
  delete_date DateTime
}

model Location {
  id              Int           @id @default(autoincrement())
  name            String?       @db.VarChar(2000)
  address         String        @db.VarChar(2000)
  region          String        @db.VarChar(2000)
  shuttleTravelId Int
  poligon         Json // poligon: field where all the coordinates will be stored in a Json format
  shuttleTravel   ShuttleTravel @relation(fields: [shuttleTravelId], references: [id])

}

//Promociones (Deals/Promotion ?)
model Promotion {
  id                  Int      @id @default(autoincrement())
  coupon_code         String   @db.VarChar(2000)
  application_date    DateTime
  application_service String   @db.VarChar(2000) //check ?
  application_client  String   @db.VarChar(2000) //check ?
  clientId            Int?
  serviceId           Int?


  //  #####  RELATIONSHIPS
  client  Client?  @relation(fields: [clientId], references: [id])
  service Service? @relation(fields: [serviceId], references: [id]) //check: one service can have zero, one or more promotions


}
