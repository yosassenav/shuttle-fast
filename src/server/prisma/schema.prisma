generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(2000)
  email       String    @db.VarChar(2000)
  password    String    @db.VarChar(2000)
  createdDate DateTime
  deactivated Boolean
  adminId     Int?      @unique
  clientId    Int?      @unique
  operatorId  Int?      @unique
  admin       Admin?    @relation(fields: [adminId], references: [id])
  client      Client?   @relation(fields: [clientId], references: [id])
  operator    Operator? @relation(fields: [operatorId], references: [id])
  Review      Review[]
}

model Admin {
  id   Int   @id @default(autoincrement())
  user User?
}

model Client {
  id            Int             @id @default(autoincrement())
  phone         String          @db.VarChar(2000)
  BillingData   BillingData[]
  Payment       Payment[]
  Promotion     Promotion[]
  ShuttleTravel ShuttleTravel[]
  user          User?
}

model Operator {
  id            Int             @id @default(autoincrement())
  available     Boolean
  phone         String          @db.VarChar(2000)
  shuttleId     Int?
  Shuttle       Shuttle?        @relation(fields: [shuttleId], references: [id])
  ShuttleTravel ShuttleTravel[]
  user          User?

  @@index([shuttleId], name: "shuttleId")
}

model Shuttle {
  id              Int             @id @default(autoincrement())
  shuttleNumber   Int
  available       Boolean
  registrationTag String          @db.VarChar(28)
  seats           Int
  createDate      DateTime
  operatorId      Int
  operator        Operator[]
  ShuttleTravel   ShuttleTravel[]
}

model ShuttleTravel {
  id             Int        @id @default(autoincrement())
  startDate      DateTime
  endDate        DateTime
  distanceMeters Int
  creationDate   DateTime
  shuttleId      Int
  clientId       Int
  operatorId     Int
  client         Client     @relation(fields: [clientId], references: [id])
  operator       Operator   @relation(fields: [operatorId], references: [id])
  shuttle        Shuttle    @relation(fields: [shuttleId], references: [id])
  Location       Location[]

  @@index([clientId], name: "clientId")
  @@index([operatorId], name: "operatorId")
  @@index([shuttleId], name: "shuttleId")
}

model PaymentMethod {
  id            Int          @id @default(autoincrement())
  name          String       @db.VarChar(2000)
  billingDataId Int?
  BillingData   BillingData? @relation(fields: [billingDataId], references: [id])
  Payment       Payment[]

  @@index([billingDataId], name: "billingDataId")
}

model Payment {
  id              Int           @id @default(autoincrement())
  totalAmount     Int
  tokenId         Int
  createDate      DateTime
  clientId        Int
  refundId        Int?          @unique
  paymentMethodId Int
  billingDataId   Int
  billingData     BillingData   @relation(fields: [billingDataId], references: [id])
  client          Client        @relation(fields: [clientId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  refund          Refund?       @relation(fields: [refundId], references: [id])
  Service         Service?

  @@index([billingDataId], name: "billingDataId")
  @@index([clientId], name: "clientId")
  @@index([paymentMethodId], name: "paymentMethodId")
}

model BillingData {
  id            Int             @id @default(autoincrement())
  rfc           String          @db.VarChar(2000)
  address       String          @db.VarChar(2000)
  emailBilling  String          @db.VarChar(2000)
  cardNumber    Int
  clientId      Int
  client        Client          @relation(fields: [clientId], references: [id])
  Payment       Payment[]
  PaymentMethod PaymentMethod[]

  @@index([clientId], name: "clientId")
}

model Refund {
  id         Int      @id @default(autoincrement())
  amount     Int
  tokenId    Int
  createDate DateTime
  Payment    Payment?
}

model Service {
  id              Int               @id @default(autoincrement())
  folio           String            @db.VarChar(64)
  createDate      DateTime
  paymentId       Int?              @unique
  cancellationId  Int?              @unique
  statusId        Int
  cancellation    Cancellation?     @relation(fields: [cancellationId], references: [id])
  payment         Payment?          @relation(fields: [paymentId], references: [id])
  status          ServiceStatus     @relation(fields: [statusId], references: [id])
  Promotion       Promotion[]
  ServiceMetadata ServiceMetadata[]

  @@index([statusId], name: "statusId")
}

model ServiceStatus {
  id      Int       @id @default(autoincrement())
  status  String    @db.VarChar(2000)
  Service Service[]
}

model ServiceMetadata {
  id               Int      @id @default(autoincrement())
  modificationData DateTime
  snapshotData     Json
  serviceId        Int
  service          Service  @relation(fields: [serviceId], references: [id])

  @@index([serviceId], name: "serviceId")
}

model Cancellation {
  id                Int      @id @default(autoincrement())
  cancelationPholio String   @db.VarChar(2000)
  createDate        DateTime
  deleteDate        DateTime
  Service           Service?
}

model Review {
  id         Int      @id @default(autoincrement())
  comment    String   @db.VarChar(2000)
  rating     Int
  userId     Int
  createDate DateTime
  deleteDate DateTime
  author     User     @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model Location {
  id              Int           @id @default(autoincrement())
  name            String?       @db.VarChar(2000)
  address         String        @db.VarChar(2000)
  region          String        @db.VarChar(2000)
  shuttleTravelId Int
  poligon         Json
  shuttleTravel   ShuttleTravel @relation(fields: [shuttleTravelId], references: [id])

  @@index([shuttleTravelId], name: "shuttleTravelId")
}

model Promotion {
  id              Int      @id @default(autoincrement())
  couponCode      String   @db.VarChar(2000)
  applicationDate DateTime
  clientId        Int?
  serviceId       Int?
  client          Client?  @relation(fields: [clientId], references: [id])
  service         Service? @relation(fields: [serviceId], references: [id])

  @@index([clientId], name: "clientId")
  @@index([serviceId], name: "serviceId")
}
